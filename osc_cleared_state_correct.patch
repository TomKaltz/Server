--- a/src/core/producer/stage.cpp
+++ b/src/core/producer/stage.cpp
@@ -50,6 +50,7 @@ struct stage::impl : public std::enable_shared_from_this<impl>
     monitor::state                      state_;
     std::map<int, layer>                layers_;
     std::map<int, tweened_transform>    tweens_;
+    std::set<int>                       recently_cleared_layers_;
     std::set<int>                       routeSources;
 
     mutable std::mutex      format_desc_mutex_;
@@ -217,8 +218,18 @@ struct stage::impl : public std::enable_shared_from_this<impl>
                 monitor::state state;
                 for (auto& p : layers_) {
                     state["layer"][p.first] = p.second.state();
                 }
+                
+                // Include recently cleared layers in state
+                for (int layer_index : recently_cleared_layers_) {
+                    state["layer"][layer_index]["foreground"]["producer"] = "cleared";
+                    state["layer"][layer_index]["background"]["producer"] = "cleared";
+                    state["layer"][layer_index]["status"] = "cleared";
+                }
+                
+                // Clear the recently cleared set after one frame
+                recently_cleared_layers_.clear();
+                
                 state_ = std::move(state);
             } catch (...) {
                 layers_.clear();
@@ -320,7 +331,12 @@ struct stage::impl : public std::enable_shared_from_this<impl>
 
     std::future<void> clear(int index)
     {
-        return executor_.begin_invoke([=] { layers_.erase(index); });
+        return executor_.begin_invoke([=] {
+            if (layers_.find(index) != layers_.end()) {
+                recently_cleared_layers_.insert(index);
+            }
+            layers_.erase(index);
+        });
     }
 
     std::future<void> clear()
@@ -346,7 +362,13 @@ struct stage::impl : public std::enable_shared_from_this<impl>
     std::future<void> clear()
     {
-        return executor_.begin_invoke([=] { layers_.clear(); });
+        return executor_.begin_invoke([=] {
+            for (auto& p : layers_) {
+                recently_cleared_layers_.insert(p.first);
+            }
+            
+            layers_.clear();
+        });
     }
 
     std::future<void> swap_layers(const std::shared_ptr<stage>& other, bool swap_transforms)